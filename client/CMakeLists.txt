cmake_minimum_required(VERSION 3.10)
project(client)

include_directories(.)

aux_source_directory(. CODES)

add_compile_options(
    # -O3
    # -g
)

if(GP_SIZE)
    add_compile_definitions(GP_SIZE=${GP_SIZE})
endif()
if(GP_PART)
    add_compile_definitions(GP_PART=${GP_PART})
endif()
if(HIT_THRES)
    add_compile_definitions(HIT_THRES=${HIT_THRES})
endif()
if(FEATURE_METHOD)
    add_compile_definitions(FEATURE_METHOD=${FEATURE_METHOD})
endif()
if(ROUTE_METHOD)
    add_compile_definitions(ROUTE_METHOD=${ROUTE_METHOD})
endif()
if(EXP_SEGMENT_SIZE)
    add_compile_definitions(EXP_SEGMENT_SIZE=${EXP_SEGMENT_SIZE})
endif()
if(FEATURE_NUM)
    add_compile_definitions(FEATURE_NUM=${FEATURE_NUM})
endif()
if(NODE_NUM)
    add_compile_definitions(NODE_NUM=${NODE_NUM})
endif()
if(SKEW_THRES)
    add_compile_definitions(SKEW_THRES=${SKEW_THRES})
endif()
if(SSDEDUP)
    add_compile_definitions(SSDEDUP=${SSDEDUP})
endif()
if(LCACHE_SIZE)
    add_compile_definitions(LCACHE_SIZE=${LCACHE_SIZE})
endif()
if(LC_HIT_THRES)
    add_compile_definitions(LC_HIT_THRES=${LC_HIT_THRES})
endif()

find_package(PkgConfig REQUIRED)
pkg_check_modules(GLIB2 REQUIRED glib-2.0 gio-2.0)
include_directories(${GLIB2_INCLUDE_DIRS})
link_directories(${GLIB2_LIBRARY_DIRS})
add_definitions(${GLIB2_CFLAGS_OTHER})

add_executable(client ${CODES})
target_link_libraries(client ${GLIB2_LIBRARIES} pthread)